(function(window, document, $, undefined) {
    "use strict";

    var $window = $(window),
        $document = $(document);

    var Global = {
        count: 0,
        started: false,
        instances: [],
        types: {},
        generateId: function() {
            this.count++;
            return this.count;
        },
        scroll: function() {
            $.each(Global.instances, function(i, instance) {
                Global.types[instance.type].scroll(instance);
            });
        },
        resize: function() {
            $.each(Global.instances, function(i, instance) {
                Global.types[instance.type].resize(instance);
            });
        },
        start: function() {
            if (!this.started) {
                $window.on('scroll', this.scroll);
                $window.on('resize', this.resize);
                this.started = true;
            }
        },
        stop: function() {
            this.started = false;
            $window.off('scroll', this.scroll);
            $window.off('resize', this.resize);
        }
    };

    // Constructor
    var Sticker = $.Sticker = function(element, options) {
        // Protected variables
        this.protectedVariable = '';

        this.element = element;
        this.$element = $(element);

        this.type = (options.type !== undefined) ? options.type : Sticker.defaults.type;
        // Merge the options
        this.options = $.extend({}, Sticker.defaults, Global.types[this.type].defaults, options);

        // Namespacing
        var namespace = this.options.namespace;

        // Class
        this.classes = {};
        this.classes.wrapper = namespace + '-wrapper';
        this.classes.active = namespace + '-active';

        this.components = {};

        var self = this;
        var windowHeight = $window.height(),
            documentHeight = $document.height();

        $.extend(self, {
            active: function() {
                self.$element.addClass(self.classes.active);
            }
        });

        // Initialization
        this.init();
    };

    // Default options for the plugin as a simple object
    Sticker.defaults = {
        namespace: 'sticker', // String: Prefix string attached to the class of every element generated by the plugin,
        type: 'top'
    };

    Sticker.registerType = function(name, type) {
        Global.types[name] = type;
    };

    Sticker.prototype = {
        constructor: Sticker,
        init: function() {
            this.id = Global.generateId();

            var $wrapper = $('<div></div>').addClass(this.classes.wrapper);
            this.$element.wrapAll($wrapper);

            this.$wrapper = this.$element.parent();

            Global.types[this.type].init(this);
            Global.instances.push(this);
            Global.start();
        },
        destroy: function() {
            this.$element.unwrap();

            for (var i in Global.instances) {
                if (Global.instances[i].id === this.id) {
                    Global.instances.splice(i, 1);
                }
            }

            if (Global.instances.length === 0) {
                Global.stop();
            }
        }
    };

    Sticker.registerType('top', {
        defaults: {
            topSpace: 0
        },
        init: function(api) {
            api.$wrapper.css('height', api.$element.outerHeight());
        },
        scroll: function(api) {
            // in this case, the element should not have margin top and bottom value
            var scrollTop = $window.scrollTop(),
                elementTop = api.$wrapper.offset().top;

            if (api.options.topSpace > elementTop) {
                api.options.topSpace = elementTop;
            }

            var extra = elementTop - api.options.topSpace - scrollTop;
            if (extra < 0) {
                api.$element.css({
                    position: 'fixed',
                    top: api.options.topSpace
                });
            } else {
                api.$element.css({
                    position: '',
                    top: ''
                });
            }
        },
        resize: function() {

        }
    });


    // Collection method.
    $.fn.sticker = function(options) {
        return this.each(function() {
            if (!$.data(this, 'sticker')) {
                $.data(this, 'sticker', new Sticker(this, options));
            }
        });
    };
}(window, document, jQuery));